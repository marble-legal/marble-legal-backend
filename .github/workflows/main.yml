name: Deploy API to prod environment

on:
  push:
    branches:
      - main-disabled

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy CloudFormation Stack
        env:
          STAGE: prod
        run: aws cloudformation deploy --template-file infra/cloudformation-template.yaml --stack-name marble-api-$STAGE --capabilities CAPABILITY_NAMED_IAM --parameter-overrides STAGE=$STAGE AWSACCESSKEY=${{ secrets.AWS_ACCESS_KEY }} AWSSECRETACCESSKEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} DBHOST="${{ secrets.DB_HOST }}" DBUSERNAME=${{ secrets.DB_USERNAME }} DBPASSWORD=${{ secrets.DB_PASSWORD }} JWTSECRET=${{ secrets.JWT_SECRET }} ASSETSBUCKETNAME=assets.marblels.com SERVERCOUNT=0 LBCERTIFICATE=arn:aws:acm:us-east-1:339712796640:certificate/ccc8f3f8-986f-4917-9da6-67c8c6fe729b

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: marble-ecr-prod
          IMAGE_TAG: latest
        run: |
          docker build -f ./Dockerfile . -t $ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Trigger ECS Service for deployment
        env:
          STAGE: prod
        run: aws ecs update-service --cluster marble-ecs-cluster-${STAGE} --service marble-ecs-api-service-${STAGE} --force-new-deployment
